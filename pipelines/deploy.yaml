parameters:
  - name: applyBranch
    type: string
    default: refs/heads/master
    displayName: (Optional) The trunk branch where terraform apply stages are allowed. Defaults to refs/heads/master.

  - name: token
    type: object
    displayName: |
      (Required) Where to source the Terraform Cloud token.

      secretName:            <string>  - (Required) Azure Key Vault secret name for Terraform Cloud Token. Required when using a key vault or variable group.
      serviceConnectionName: <string>  - (Optional) Azure DevOps Service Connection name to use to connect to keyVaultName. Required when using a key vault.
      keyVaultName:          <string>  - (Optional) Azure Key Vault where Terraform Cloud Token is stored. Required when using a key vault.
      azdoVariableGroup:     <string>  - (Optional) The Azure DevOps Variable Group to get the token from. Required when using a variable group.
      useEnvironmentToken:   <boolean> - (Optional) Whether to use a token defined in each environment. A terraformCloudToken must be specified in each environment.

  - name: environments
    type: object
    displayName: |
      (Required) A list of environments to deploy.

      - name:                          <string>   - (Required) The name of the environment. Usually dv, sy, st, pr, mg.
        azureDevOpsEnvironment:        <string>   - (Required) The name of the Azure DevOps environment to deploy in to.
        dependsOn:                     <string>   - (Optional) The name of any environment that should run before this one.
        terraformWorkingDirectory:     <string>   - (Optional) The working directory to execute terraform from. Defaults to repository root.
        terraformCommandOptions:       <string>   - (Optional) Any additional cli options to pass to the terraform cli.
        terraformCloudToken            <string>   - (Optional) A specific Terraform Cloud token to use for the environment. useEnvironmentToken must also be true.
        terraformVersion               <string>   - (Optional) A specific Terraform Version to use to init. Only affects init(if you want to test on a specific terraform version please change the version parameter on the install-terarform.yaml file), Terraform Cloud workspace determines the actual version.
        preSteps:                      <stepList> - (Optional) A list of additional azure devops steps to run before terraform runs.
        postSteps:                     <stepList> - (Optional) A list of additional azure devops steps to run after terraform runs.
        terraformEnvironmentVariables: <object>   - (Optional) A list of environment variables to use when terraform runs.
          - name:  <string> - (Required) The name of the environment variable.
            value: <string> - (Required) The value of the environment variable.

stages:
  # Setup stage (get terraform token)
  - ${{ if not(parameters.token.useEnvironmentToken) }}:
      - stage: setup
        displayName: Setup
        variables:
          - ${{ if parameters.token.azdoVariableGroup }}:
              - group: ${{ parameters.token.azdoVariableGroup }}
        jobs:
          - job: GetToken
            displayName: Get Terraform token
            pool:
              vmImage: ubuntu-latest
            steps:
              - checkout: none
              - ${{ if and(parameters.token.serviceConnectionName, parameters.token.keyVaultName) }}:
                  - task: AzureKeyVault@2
                    displayName: Fetch from KeyVault
                    inputs:
                      azureSubscription: ${{ parameters.token.serviceConnectionName }}
                      KeyVaultName: ${{ parameters.token.keyVaultName }}
                      SecretsFilter: ${{ parameters.token.secretName }}
              - pwsh: |
                  $token = '$(${{ parameters.token.secretName }})'

                  # Check if the token exists and has been expanded (doesnt just look like '$(secretName)')
                  if ($token -and $token -notmatch "\$\((.*?)\)" ) {
                    Write-Output "##vso[task.setvariable variable=TFC_TOKEN;isOutput=true;issecret=true]$token"
                  } else {
                    throw "No token found"
                  }
                name: Token
                displayName: Save token
                failOnStderr: true

  # Plan stages
  - ${{ each env in parameters.environments }}:
      - stage: ${{ env.name }}_plan
        displayName: ${{ env.name }}_plan
        dependsOn:
          - ${{ if not(parameters.token.useEnvironmentToken) }}:
              - setup
        variables:
          ${{ if not(parameters.token.useEnvironmentToken) }}:
            TFC_TOKEN: $[ stageDependencies.setup.GetToken.outputs['Token.TFC_TOKEN'] ]
          ${{ elseif and(parameters.token.useEnvironmentToken, env.terraformCloudToken) }}:
            TFC_TOKEN: ${{ env.terraformCloudToken }}
        jobs:
          - template: templates/plan.yaml
            parameters:
              terraformCloudToken: $(TFC_TOKEN)
              ${{ if env.terraformVersion }}:
                terraformVersion: ${{ env.terraformVersion }}
              ${{ if env.terraformCommandOptions }}:
                terraformCommandOptions: ${{ env.terraformCommandOptions }}
              ${{ if env.terraformWorkingDirectory }}:
                terraformWorkingDirectory: ${{ env.terraformWorkingDirectory }}
              ${{ if env.terraformEnvironmentVariables }}:
                terraformEnvironmentVariables: ${{ env.terraformEnvironmentVariables }}
              ${{ if env.preSteps }}:
                preSteps: ${{ env.preSteps }}
              ${{ if env.postSteps }}:
                postSteps: ${{ env.postSteps }}

  # Apply stages
  - ${{ each env in parameters.environments }}:
      - stage: ${{ env.name }}_apply
        displayName: ${{ env.name }}_apply
        dependsOn:
          - ${{ if not(parameters.token.useEnvironmentToken) }}:
              - setup
          - ${{ env.name }}_plan
          - ${{ if ne(env.dependsOn, '') }}:
              - ${{ env.dependsOn }}_apply
        condition: |
          or(
            and(
              eq('${{ env.dependsOn }}', ''),
              eq(variables['Build.SourceBranch'], '${{ parameters.applyBranch }}'),
              succeeded(),
              eq(dependencies.${{ env.name }}_plan.outputs['PlanJob.PlanStep.HasChanges'], 'true')
            ),
            and(
              ne('${{ env.dependsOn }}', ''),
              eq(variables['Build.SourceBranch'], '${{ parameters.applyBranch }}'),
              not(failed()),
              in(dependencies.${{ env.dependsOn }}_apply.result, 'Succeeded', 'Skipped'),
              eq(dependencies.${{ env.name }}_plan.outputs['PlanJob.PlanStep.HasChanges'], 'true')
            )
          )
        variables:
          ${{ if not(parameters.token.useEnvironmentToken) }}:
            TFC_TOKEN: $[ stageDependencies.setup.GetToken.outputs['Token.TFC_TOKEN'] ]
          ${{ elseif and(parameters.token.useEnvironmentToken, env.terraformCloudToken) }}:
            TFC_TOKEN: ${{ env.terraformCloudToken }}
        jobs:
          - template: templates/apply.yaml
            parameters:
              terraformCloudToken: $(TFC_TOKEN)
              azureDevOpsEnvironment: ${{ env.azureDevOpsEnvironment }}
              ${{ if env.terraformVersion }}:
                terraformVersion: ${{ env.terraformVersion }}
              ${{ if env.terraformCommandOptions }}:
                terraformCommandOptions: ${{ env.terraformCommandOptions }}
              ${{ if env.terraformWorkingDirectory }}:
                terraformWorkingDirectory: ${{ env.terraformWorkingDirectory }}
              ${{ if env.terraformEnvironmentVariables }}:
                terraformEnvironmentVariables: ${{ env.terraformEnvironmentVariables }}
              ${{ if env.preSteps }}:
                preSteps: ${{ env.preSteps }}
              ${{ if env.postSteps }}:
                postSteps: ${{ env.postSteps }}

  - ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
      - stage: summary
        displayName: Summary
        dependsOn:
          - ${{ if not(parameters.token.useEnvironmentToken) }}:
              - setup
          - ${{ each env in parameters.environments }}:
              - ${{ env.name }}_plan
        variables:
          ${{ each env in parameters.environments }}:
            PLAN_HAS_CHANGES_${{ env.name }}: $[ stageDependencies.${{ env.name }}_plan.PlanJob.outputs['PlanStep.HasChanges'] ]
            PLAN_RUN_URL_${{ env.name }}: $[ stageDependencies.${{ env.name }}_plan.PlanJob.outputs['PlanStep.RunUrl'] ]
            ${{ if not(parameters.token.useEnvironmentToken) }}:
              TFC_TOKEN_${{ env.name }}: $[ stageDependencies.setup.GetToken.outputs['Token.TFC_TOKEN'] ]
            ${{ elseif and(parameters.token.useEnvironmentToken, env.terraformCloudToken) }}:
              TFC_TOKEN_${{ env.name }}: ${{ env.terraformCloudToken }}
        jobs:
          - template: templates/plan-summary.yaml
            parameters:
              environments:
                - ${{ each env in parameters.environments }}:
                    - name: ${{ env.name }}
                      hasChanges: $(PLAN_HAS_CHANGES_${{ env.name }})
                      runUrl: $(PLAN_RUN_URL_${{ env.name }})
                      token: $(TFC_TOKEN_${{ env.name }})
